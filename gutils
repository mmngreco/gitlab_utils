#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
gutils_usage() {
  if [[ -n $long_usage ]]; then
    printf "gutils - Gitlab utils\n"
    echo 
  else
    printf "gutils - Gitlab utils\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  gutils [command]\n"
  printf "  gutils [command] --help | -h\n"
  printf "  gutils --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  download-issues   Download issues to a file."
  echo "  download-time     Get issues and times from a milestone."
  echo "  upload-time       Upload time to issues using a file."
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  GITLAB_HOST (required)"
    printf "    The host used to retrieve information from.\n"
    printf "    Default: etsgit1.ets.es\n"
    echo
    
    # :environment_variable.usage
    echo "  GITLAB_TOKEN (required)"
    printf "    The token to login.\n"
    echo

  fi
}

# :command.usage
gutils_download_issues_usage() {
  if [[ -n $long_usage ]]; then
    printf "gutils download-issues - Download issues to a file.\n"
    echo 
  else
    printf "gutils download-issues - Download issues to a file.\n"
    echo 
  fi

  printf "Shortcut: d\n"
  echo

  printf "Usage:\n"
  printf "  gutils download-issues [options]\n"
  printf "  gutils download-issues --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --issues, -i ISSUES (required)"
    printf "    Issues list\n"
    echo
    
    # :flag.usage
    echo "  --output, -o DIR (required)"
    printf "    Directory where the files will be written. It will be created if it doesn't\n    exist.\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gutils download-issues \"333 334\" --ouput ./issues\n"
    echo

  fi
}

# :command.usage
gutils_download_time_usage() {
  if [[ -n $long_usage ]]; then
    printf "gutils download-time - Get issues and times from a milestone.\n"
    echo 
  else
    printf "gutils download-time - Get issues and times from a milestone.\n"
    echo 
  fi

  printf "Shortcut: down\n"
  echo

  printf "Usage:\n"
  printf "  gutils download-time [options]\n"
  printf "  gutils download-time --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --milestone, -m MILESTONE (required)"
    printf "    Milestone label.\n"
    echo
    
    # :flag.usage
    echo "  --projectid, -p PROJECTID"
    printf "    Project id where the issues will be updated.\n"
    printf "    Default: $PRODUCT_BACKLOG_ID \n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gutils download-time -m sprint:34\n"
    echo

  fi
}

# :command.usage
gutils_upload_time_usage() {
  if [[ -n $long_usage ]]; then
    printf "gutils upload-time - Upload time to issues using a file.\n"
    echo 
  else
    printf "gutils upload-time - Upload time to issues using a file.\n"
    echo 
  fi

  printf "Shortcut: up\n"
  echo

  printf "Usage:\n"
  printf "  gutils upload-time [options]\n"
  printf "  gutils upload-time --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --file, -f FILE (required)"
    printf "    File used to upload the time to each issue.\n"
    echo
    
    # :flag.usage
    echo "  --projectid, -p PROJECTID"
    printf "    Project id where the issues will be updated.\n"
    printf "    Default: $PRODUCT_BACKLOG_ID \n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  gutils upload-time -f ./votes-example.txt\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
gutils_download_issues_command() {
  # :src/download_issues_command.sh
  #!/usr/bin/env bash
  # https://docs.gitlab.com/ce/api/issues.html#list-project-issues
  PROJECT_ID=$PRODUCT_BACKLOG_ID
  ENDPOINT="https://$GITLAB_HOST/api/v4/projects/$PROJECT_ID"
  ISSUES="issues?iids[]="
  OUTPUT=${args[--output]}
  query='.[] | "# " + .title + "\n\n" + .description'
  header="PRIVATE-TOKEN: $GITLAB_TOKEN"
  
  [ ! -d "$OUTPUT" ] && mkdir $OUTPUT
  
  echo Exporting...
  
  for iid in ${args[--issues]}; do
  
      URL="$ENDPOINT/issues?iids[]=$iid"
      content=$(curl -s --header "${header}" ${URL} | jq -r "${query}")
  
      if [ -n "$content" ]; then
          echo Writing $OUTPUT/$iid.md
          echo "$content" > $OUTPUT/$iid.md
      else
          echo "Couldn't retrieve content for the issue ${iid}."
      fi
  
  done
}

# :command.function
gutils_download_time_command() {
  # :src/download_time_command.sh
  #!/usr/bin/env bash
  # https://docs.gitlab.com/ce/api/issues.html#list-project-issues
  
  ENDPOINT="https://$GITLAB_HOST/api/v4/projects/$PRODUCT_BACKLOG_ID/issues"
  TMPL="curl --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" \"$ENDPOINT\"\n"
  MILESTONE="${args[--milestone]}"
  SEP=$GITLAB_SEP
  header="PRIVATE-TOKEN: $GITLAB_TOKEN"
  url="$ENDPOINT?scope=all&milestone=$MILESTONE&per_page=100"
  # jq_query=".[] | (.iid | tostring) + \"$SEP\" + .title  +\"$SEP\" + .web_url  + \"$SEP\" + (.time_stats.time_estimate / 28800 | tostring)"
  jq_query=".[] | .title  +\"$SEP\" + .web_url  + \"$SEP\" + (.time_stats.time_estimate / 28800 | tostring)"
  
  curl -S -s --header "$header" "$url" | jq -r "$jq_query"
}

# :command.function
gutils_upload_time_command() {
  # :src/upload_time_command.sh
  #!/usr/bin/env bash
  # https://docs.gitlab.com/ce/api/issues.html#list-project-issues
  
  FILE=$(realpath "${args[--file]}")
  echo File: $FILE
  PB_ID=${args[--projectid]}
  echo Project ID: $PB_ID 
  ENDPOINT="https://$GITLAB_HOST/api/v4/projects/$PB_ID/issues"
  
  awk -v TOKEN="$GITLAB_TOKEN" \
      -v ENDPOINT="$ENDPOINT" \
      -f src/upload.awk $FILE > src/curl_post_votes.sh \
      && sh src/curl_post_votes.sh \
      && rm src/curl_post_votes.sh
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gutils_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  export GITLAB_HOST="${GITLAB_HOST:-etsgit1.ets.es}"
  if [[ -z "$GITLAB_HOST" ]]; then
    printf "missing required environment variable: GITLAB_HOST\n"
    exit 1
  fi
  if [[ -z "$GITLAB_TOKEN" ]]; then
    printf "missing required environment variable: GITLAB_TOKEN\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  download-issues | d )
    action="download-issues"
    shift
    gutils_download_issues_parse_requirements "$@"
    shift $#
    ;;    
  
  download-time | down )
    action="download-time"
    shift
    gutils_download_time_parse_requirements "$@"
    shift $#
    ;;    
  
  upload-time | up )
    action="upload-time"
    shift
    gutils_upload_time_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    gutils_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
gutils_download_issues_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gutils_download_issues_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="download-issues"
  # :command.required_args_filter
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--issues* && "$argstring" != *-i* ]]; then
    printf "missing required flag: --issues, -i ISSUES\n"
    exit 1
  fi
  if [[ "$argstring" != *--output* && "$argstring" != *-o* ]]; then
    printf "missing required flag: --output, -o DIR\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --issues | -i )
      if [[ $2 ]]; then
        args[--issues]="$2"
        shift
        shift
      else
        printf "%s\n" "--issues requires an argument: --issues, -i ISSUES"
        exit 1
      fi
      ;;
  
    # :flag.case
    --output | -o )
      if [[ $2 ]]; then
        args[--output]="$2"
        shift
        shift
      else
        printf "%s\n" "--output requires an argument: --output, -o DIR"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
gutils_download_time_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gutils_download_time_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="download-time"
  # :command.required_args_filter
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--milestone* && "$argstring" != *-m* ]]; then
    printf "missing required flag: --milestone, -m MILESTONE\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --milestone | -m )
      if [[ $2 ]]; then
        args[--milestone]="$2"
        shift
        shift
      else
        printf "%s\n" "--milestone requires an argument: --milestone, -m MILESTONE"
        exit 1
      fi
      ;;
  
    # :flag.case
    --projectid | -p )
      if [[ $2 ]]; then
        args[--projectid]="$2"
        shift
        shift
      else
        printf "%s\n" "--projectid requires an argument: --projectid, -p PROJECTID"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[--projectid]} ]] || args[--projectid]=$PRODUCT_BACKLOG_ID
  # :command.whitelist_filter
}

# :command.parse_requirements
gutils_upload_time_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    gutils_upload_time_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upload-time"
  # :command.required_args_filter
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--file* && "$argstring" != *-f* ]]; then
    printf "missing required flag: --file, -f FILE\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --file | -f )
      if [[ $2 ]]; then
        args[--file]="$2"
        shift
        shift
      else
        printf "%s\n" "--file requires an argument: --file, -f FILE"
        exit 1
      fi
      ;;
  
    # :flag.case
    --projectid | -p )
      if [[ $2 ]]; then
        args[--projectid]="$2"
        shift
        shift
      else
        printf "%s\n" "--projectid requires an argument: --projectid, -p PROJECTID"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[--projectid]} ]] || args[--projectid]=$PRODUCT_BACKLOG_ID
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.2.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "download-issues" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gutils_download_issues_usage
    else
      gutils_download_issues_command
    fi
  
  elif [[ $action == "download-time" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gutils_download_time_usage
    else
      gutils_download_time_command
    fi
  
  elif [[ $action == "upload-time" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      gutils_upload_time_usage
    else
      gutils_upload_time_command
    fi
  
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
